// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Operation } from '../transmuxer/operation.js';
import { State } from '../transmuxer/state.js';


export class Interface {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Interface {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInterface(bb:flatbuffers.ByteBuffer, obj?:Interface):Interface {
  return (obj || new Interface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInterface(bb:flatbuffers.ByteBuffer, obj?:Interface):Interface {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Interface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state():State {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : State.Idle;
}

operation():Operation {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Operation.Idle;
}

argOffset():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

argWhence():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

argBufferSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

buffer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

bufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

bufferArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

offset():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startInterface(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addState(builder:flatbuffers.Builder, state:State) {
  builder.addFieldInt8(0, state, State.Idle);
}

static addOperation(builder:flatbuffers.Builder, operation:Operation) {
  builder.addFieldInt8(1, operation, Operation.Idle);
}

static addArgOffset(builder:flatbuffers.Builder, argOffset:bigint) {
  builder.addFieldInt64(2, argOffset, BigInt('0'));
}

static addArgWhence(builder:flatbuffers.Builder, argWhence:number) {
  builder.addFieldInt32(3, argWhence, 0);
}

static addArgBufferSize(builder:flatbuffers.Builder, argBufferSize:number) {
  builder.addFieldInt32(4, argBufferSize, 0);
}

static addBuffer(builder:flatbuffers.Builder, bufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, bufferOffset, 0);
}

static createBufferVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addOffset(builder:flatbuffers.Builder, offset:bigint) {
  builder.addFieldInt64(6, offset, BigInt('0'));
}

static endInterface(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishInterfaceBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedInterfaceBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createInterface(builder:flatbuffers.Builder, state:State, operation:Operation, argOffset:bigint, argWhence:number, argBufferSize:number, bufferOffset:flatbuffers.Offset, offset:bigint):flatbuffers.Offset {
  Interface.startInterface(builder);
  Interface.addState(builder, state);
  Interface.addOperation(builder, operation);
  Interface.addArgOffset(builder, argOffset);
  Interface.addArgWhence(builder, argWhence);
  Interface.addArgBufferSize(builder, argBufferSize);
  Interface.addBuffer(builder, bufferOffset);
  Interface.addOffset(builder, offset);
  return Interface.endInterface(builder);
}
}

// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file src/shared-memory-api.proto (syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message ReadRequest
 */
export class ReadRequest extends Message<ReadRequest> {
  /**
   * @generated from field: int32 offset = 1;
   */
  offset = 0;

  /**
   * @generated from field: int32 buffer_size = 2;
   */
  bufferSize = 0;

  constructor(data?: PartialMessage<ReadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ReadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "buffer_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadRequest {
    return new ReadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadRequest {
    return new ReadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadRequest {
    return new ReadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadRequest | PlainMessage<ReadRequest> | undefined, b: ReadRequest | PlainMessage<ReadRequest> | undefined): boolean {
    return proto3.util.equals(ReadRequest, a, b);
  }
}

/**
 * @generated from message ReadResponse
 */
export class ReadResponse extends Message<ReadResponse> {
  /**
   * @generated from field: bytes buffer = 1;
   */
  buffer = new Uint8Array(0);

  constructor(data?: PartialMessage<ReadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ReadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadResponse {
    return new ReadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadResponse {
    return new ReadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadResponse {
    return new ReadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadResponse | PlainMessage<ReadResponse> | undefined, b: ReadResponse | PlainMessage<ReadResponse> | undefined): boolean {
    return proto3.util.equals(ReadResponse, a, b);
  }
}

/**
 * @generated from message Read
 */
export class Read extends Message<Read> {
  /**
   * @generated from field: ReadRequest request = 1;
   */
  request?: ReadRequest;

  /**
   * @generated from field: ReadResponse response = 2;
   */
  response?: ReadResponse;

  constructor(data?: PartialMessage<Read>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Read";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: ReadRequest },
    { no: 2, name: "response", kind: "message", T: ReadResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Read {
    return new Read().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Read {
    return new Read().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Read {
    return new Read().fromJsonString(jsonString, options);
  }

  static equals(a: Read | PlainMessage<Read> | undefined, b: Read | PlainMessage<Read> | undefined): boolean {
    return proto3.util.equals(Read, a, b);
  }
}

/**
 * @generated from message WriteRequest
 */
export class WriteRequest extends Message<WriteRequest> {
  /**
   * @generated from field: int32 offset = 1;
   */
  offset = 0;

  /**
   * @generated from field: bytes buffer = 2;
   */
  buffer = new Uint8Array(0);

  /**
   * @generated from field: int32 timebase_num = 3;
   */
  timebaseNum = 0;

  /**
   * @generated from field: int32 timebase_den = 4;
   */
  timebaseDen = 0;

  /**
   * @generated from field: int32 last_frame_pts = 5;
   */
  lastFramePts = 0;

  /**
   * @generated from field: int32 last_frame_duration = 6;
   */
  lastFrameDuration = 0;

  /**
   * @generated from field: int32 keyframe_duration = 7;
   */
  keyframeDuration = 0;

  /**
   * @generated from field: int32 keyframe_pts = 8;
   */
  keyframePts = 0;

  /**
   * @generated from field: int32 keyframe_pos = 9;
   */
  keyframePos = 0;

  /**
   * @generated from field: int32 buffer_index = 10;
   */
  bufferIndex = 0;

  constructor(data?: PartialMessage<WriteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "WriteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "timebase_num", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "timebase_den", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "last_frame_pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "last_frame_duration", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "keyframe_duration", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "keyframe_pts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "keyframe_pos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "buffer_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteRequest {
    return new WriteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteRequest {
    return new WriteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteRequest {
    return new WriteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteRequest | PlainMessage<WriteRequest> | undefined, b: WriteRequest | PlainMessage<WriteRequest> | undefined): boolean {
    return proto3.util.equals(WriteRequest, a, b);
  }
}

/**
 * @generated from message WriteResponse
 */
export class WriteResponse extends Message<WriteResponse> {
  /**
   * @generated from field: int32 bytes_written = 1;
   */
  bytesWritten = 0;

  constructor(data?: PartialMessage<WriteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "WriteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bytes_written", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteResponse {
    return new WriteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteResponse {
    return new WriteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteResponse {
    return new WriteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteResponse | PlainMessage<WriteResponse> | undefined, b: WriteResponse | PlainMessage<WriteResponse> | undefined): boolean {
    return proto3.util.equals(WriteResponse, a, b);
  }
}

/**
 * @generated from message Write
 */
export class Write extends Message<Write> {
  /**
   * @generated from field: WriteRequest request = 1;
   */
  request?: WriteRequest;

  /**
   * @generated from field: WriteResponse response = 2;
   */
  response?: WriteResponse;

  constructor(data?: PartialMessage<Write>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Write";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: WriteRequest },
    { no: 2, name: "response", kind: "message", T: WriteResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Write {
    return new Write().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Write {
    return new Write().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Write {
    return new Write().fromJsonString(jsonString, options);
  }

  static equals(a: Write | PlainMessage<Write> | undefined, b: Write | PlainMessage<Write> | undefined): boolean {
    return proto3.util.equals(Write, a, b);
  }
}

/**
 * @generated from message SeekRequest
 */
export class SeekRequest extends Message<SeekRequest> {
  /**
   * @generated from field: int32 current_offset = 1;
   */
  currentOffset = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  /**
   * @generated from field: int32 whence = 3;
   */
  whence = 0;

  constructor(data?: PartialMessage<SeekRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "SeekRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "whence", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeekRequest {
    return new SeekRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeekRequest {
    return new SeekRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeekRequest {
    return new SeekRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SeekRequest | PlainMessage<SeekRequest> | undefined, b: SeekRequest | PlainMessage<SeekRequest> | undefined): boolean {
    return proto3.util.equals(SeekRequest, a, b);
  }
}

/**
 * @generated from message SeekResponse
 */
export class SeekResponse extends Message<SeekResponse> {
  /**
   * @generated from field: int32 offset = 1;
   */
  offset = 0;

  constructor(data?: PartialMessage<SeekResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "SeekResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeekResponse {
    return new SeekResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeekResponse {
    return new SeekResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeekResponse {
    return new SeekResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SeekResponse | PlainMessage<SeekResponse> | undefined, b: SeekResponse | PlainMessage<SeekResponse> | undefined): boolean {
    return proto3.util.equals(SeekResponse, a, b);
  }
}

/**
 * @generated from message Seek
 */
export class Seek extends Message<Seek> {
  /**
   * @generated from field: SeekRequest request = 1;
   */
  request?: SeekRequest;

  /**
   * @generated from field: SeekResponse response = 2;
   */
  response?: SeekResponse;

  constructor(data?: PartialMessage<Seek>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "Seek";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: SeekRequest },
    { no: 2, name: "response", kind: "message", T: SeekResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Seek {
    return new Seek().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Seek {
    return new Seek().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Seek {
    return new Seek().fromJsonString(jsonString, options);
  }

  static equals(a: Seek | PlainMessage<Seek> | undefined, b: Seek | PlainMessage<Seek> | undefined): boolean {
    return proto3.util.equals(Seek, a, b);
  }
}

/**
 * @generated from message ApiMessage
 */
export class ApiMessage extends Message<ApiMessage> {
  /**
   * @generated from oneof ApiMessage.endpoint
   */
  endpoint: {
    /**
     * @generated from field: Read read = 1;
     */
    value: Read;
    case: "read";
  } | {
    /**
     * @generated from field: Write write = 2;
     */
    value: Write;
    case: "write";
  } | {
    /**
     * @generated from field: Seek seek = 3;
     */
    value: Seek;
    case: "seek";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ApiMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ApiMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read", kind: "message", T: Read, oneof: "endpoint" },
    { no: 2, name: "write", kind: "message", T: Write, oneof: "endpoint" },
    { no: 3, name: "seek", kind: "message", T: Seek, oneof: "endpoint" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiMessage {
    return new ApiMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiMessage {
    return new ApiMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiMessage {
    return new ApiMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ApiMessage | PlainMessage<ApiMessage> | undefined, b: ApiMessage | PlainMessage<ApiMessage> | undefined): boolean {
    return proto3.util.equals(ApiMessage, a, b);
  }
}

